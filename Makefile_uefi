# LikeOS-64 UEFI Build System
# Professional UEFI kernel build with modular directory structure

# Tools
GCC = gcc
LD = ld
OBJCOPY = objcopy
DD = dd
QEMU = qemu-system-x86_64
XORRISO = xorriso
MKFS_FAT = mkfs.fat
MTOOLS = mcopy

# Directories
BUILD_DIR = build
KERNEL_DIR = kernel
INCLUDE_DIR = include
BOOT_DIR = boot

# UEFI/GNU-EFI paths
EFI_INCLUDES = -I/usr/include/efi -I/usr/include/efi/x86_64
EFI_LIBS = /usr/lib/crt0-efi-x86_64.o
EFI_LDS = /usr/lib/elf_x86_64_efi.lds

# Compiler flags for kernel
KERNEL_CFLAGS = -m64 -ffreestanding -nostdlib -nostdinc -fno-builtin \
                -fno-stack-protector -mno-red-zone -fno-pic -Wall -Wextra \
                -I$(INCLUDE_DIR)

# Compiler flags for UEFI bootloader
UEFI_CFLAGS = -fno-stack-protector -fpic -fshort-wchar -mno-red-zone \
              -maccumulate-outgoing-args $(EFI_INCLUDES) -DEFI_FUNCTION_WRAPPER

# Linker flags
KERNEL_LDFLAGS = -nostdlib -static
UEFI_LDFLAGS = -nostdlib -znocombreloc -T $(EFI_LDS) -shared -Bsymbolic

# Kernel object files
KERNEL_OBJS = $(BUILD_DIR)/init.o \
              $(BUILD_DIR)/console.o \
              $(BUILD_DIR)/interrupt.o \
              $(BUILD_DIR)/interrupt_c.o \
              $(BUILD_DIR)/gdt.o \
              $(BUILD_DIR)/gdt_c.o \
              $(BUILD_DIR)/keyboard.o \
              $(BUILD_DIR)/memory.o

# Target files
KERNEL_ELF = $(BUILD_DIR)/kernel.elf
BOOTLOADER_EFI = $(BUILD_DIR)/bootloader.efi
ISO_IMAGE = $(BUILD_DIR)/LikeOS-64.iso
FAT_IMAGE = $(BUILD_DIR)/LikeOS-64.img
USB_IMAGE = $(BUILD_DIR)/LikeOS-64-usb.img

# Default target
all: $(ISO_IMAGE) $(FAT_IMAGE) $(USB_IMAGE)

# Create build directory
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Compile kernel source files
$(BUILD_DIR)/init.o: $(KERNEL_DIR)/ke/init.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

$(BUILD_DIR)/console.o: $(KERNEL_DIR)/hal/console.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

$(BUILD_DIR)/interrupt.o: $(KERNEL_DIR)/hal/interrupt.asm | $(BUILD_DIR)
	nasm -f elf64 $< -o $@

$(BUILD_DIR)/interrupt_c.o: $(KERNEL_DIR)/hal/interrupt.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

$(BUILD_DIR)/gdt.o: $(KERNEL_DIR)/hal/gdt.asm | $(BUILD_DIR)
	nasm -f elf64 $< -o $@

$(BUILD_DIR)/gdt_c.o: $(KERNEL_DIR)/hal/gdt.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

$(BUILD_DIR)/keyboard.o: $(KERNEL_DIR)/hal/keyboard.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

$(BUILD_DIR)/memory.o: $(KERNEL_DIR)/mm/memory.c | $(BUILD_DIR)
	$(GCC) $(KERNEL_CFLAGS) -c $< -o $@

# Build kernel ELF
$(KERNEL_ELF): $(KERNEL_OBJS) kernel.lds | $(BUILD_DIR)
	@echo "Building LikeOS-64 kernel as ELF64..."
	$(LD) $(KERNEL_LDFLAGS) -T kernel.lds $(KERNEL_OBJS) -o $(KERNEL_ELF)
	@echo "LikeOS-64 ELF64 kernel built: $(KERNEL_ELF)"

# Build UEFI bootloader
$(BOOTLOADER_EFI): $(BOOT_DIR)/bootloader.c | $(BUILD_DIR)
	@echo "Building UEFI bootloader..."
	# Compile bootloader
	$(GCC) $(UEFI_CFLAGS) -c $(BOOT_DIR)/bootloader.c -o $(BUILD_DIR)/bootloader.o
	
	# Link as shared object
	$(LD) $(UEFI_LDFLAGS) $(EFI_LIBS) $(BUILD_DIR)/bootloader.o \
		-o $(BUILD_DIR)/bootloader.so \
		/usr/lib/libgnuefi.a /usr/lib/libefi.a
	
	# Convert to EFI executable
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic \
		-j .dynsym -j .rel -j .rela -j .reloc \
		--target=efi-app-x86_64 $(BUILD_DIR)/bootloader.so $(BOOTLOADER_EFI)
	@echo "UEFI bootloader built: $(BOOTLOADER_EFI)"

# Create UEFI bootable ISO
$(ISO_IMAGE): $(BOOTLOADER_EFI) $(KERNEL_ELF) | $(BUILD_DIR)
	@echo "Creating UEFI bootable ISO with FAT filesystem..."
	
	# Create temporary directory structure
	mkdir -p $(BUILD_DIR)/iso_temp
	
	# Create a FAT image for EFI boot (32MB for room)
	$(DD) if=/dev/zero of=$(BUILD_DIR)/iso_temp/efiboot.img bs=1M count=32
	$(MKFS_FAT) -F16 -n "EFIBOOT" $(BUILD_DIR)/iso_temp/efiboot.img
	
	# Copy files to the EFI boot image
	MTOOLS_SKIP_CHECK=1 mmd -i $(BUILD_DIR)/iso_temp/efiboot.img ::/EFI
	MTOOLS_SKIP_CHECK=1 mmd -i $(BUILD_DIR)/iso_temp/efiboot.img ::/EFI/BOOT
	MTOOLS_SKIP_CHECK=1 $(MTOOLS) -i $(BUILD_DIR)/iso_temp/efiboot.img $(BOOTLOADER_EFI) ::/EFI/BOOT/BOOTX64.EFI
	MTOOLS_SKIP_CHECK=1 $(MTOOLS) -i $(BUILD_DIR)/iso_temp/efiboot.img $(KERNEL_ELF) ::/kernel.elf
	
	# Also copy kernel to ISO root
	cp $(KERNEL_ELF) $(BUILD_DIR)/iso_temp/kernel.elf
	
	# Create the ISO using xorriso
	$(XORRISO) -as mkisofs \
		-rational-rock \
		-volid "LikeOS-64" \
		-joliet \
		-joliet-long \
		-eltorito-alt-boot \
		-e efiboot.img \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-o $(ISO_IMAGE) \
		$(BUILD_DIR)/iso_temp
	
	# Clean up temporary files
	rm -rf $(BUILD_DIR)/iso_temp
	@echo "UEFI bootable ISO created: $(ISO_IMAGE)"

# Create UEFI bootable FAT image (for direct use)
$(FAT_IMAGE): $(BOOTLOADER_EFI) $(KERNEL_ELF) | $(BUILD_DIR)
	@echo "Creating UEFI bootable FAT image..."
	
	# Create a 64MB FAT32 image
	$(DD) if=/dev/zero of=$(FAT_IMAGE) bs=1M count=64
	$(MKFS_FAT) -F32 -n "LikeOS-64" $(FAT_IMAGE)
	
	# Create EFI directory structure and copy files
	MTOOLS_SKIP_CHECK=1 mmd -i $(FAT_IMAGE) ::/EFI
	MTOOLS_SKIP_CHECK=1 mmd -i $(FAT_IMAGE) ::/EFI/BOOT
	MTOOLS_SKIP_CHECK=1 $(MTOOLS) -i $(FAT_IMAGE) $(BOOTLOADER_EFI) ::/EFI/BOOT/BOOTX64.EFI
	MTOOLS_SKIP_CHECK=1 $(MTOOLS) -i $(FAT_IMAGE) $(KERNEL_ELF) ::/kernel.elf
	
	@echo "UEFI bootable FAT image created: $(FAT_IMAGE)"

# Create USB bootable image
$(USB_IMAGE): $(FAT_IMAGE) | $(BUILD_DIR)
	@echo "Creating USB bootable image..."
	cp $(FAT_IMAGE) $(USB_IMAGE)
	@echo "USB bootable image created: $(USB_IMAGE)"

# Run in QEMU with UEFI firmware
qemu: $(ISO_IMAGE)
	@echo "Running LikeOS-64 in QEMU with UEFI firmware..."
	$(QEMU) -bios /usr/share/ovmf/OVMF.fd -cdrom $(ISO_IMAGE) -m 512M -serial stdio

# Run from FAT image in QEMU
qemu-fat: $(FAT_IMAGE)
	@echo "Running LikeOS-64 from FAT image in QEMU with UEFI firmware..."
	$(QEMU) -bios /usr/share/ovmf/OVMF.fd -drive format=raw,file=$(FAT_IMAGE) -m 512M -serial stdio

# Clean build files
clean:
	rm -rf $(BUILD_DIR)

# Install dependencies (Ubuntu/Debian)
deps:
	@echo "Installing build dependencies..."
	sudo apt update
	sudo apt install -y gcc nasm xorriso mtools dosfstools ovmf gnu-efi-dev

# Help target
help:
	@echo "LikeOS-64 UEFI Build System"
	@echo "Available targets:"
	@echo "  all        - Build all targets (ISO, FAT, USB images)"
	@echo "  kernel     - Build kernel ELF only"
	@echo "  bootloader - Build UEFI bootloader only"
	@echo "  iso        - Build UEFI bootable ISO"
	@echo "  fat        - Build UEFI bootable FAT image"
	@echo "  usb        - Build USB bootable image"
	@echo "  qemu       - Run in QEMU from ISO"
	@echo "  qemu-fat   - Run in QEMU from FAT image"
	@echo "  clean      - Clean build files"
	@echo "  deps       - Install build dependencies"

# Individual targets
kernel: $(KERNEL_ELF)
bootloader: $(BOOTLOADER_EFI)
iso: $(ISO_IMAGE)
fat: $(FAT_IMAGE)
usb: $(USB_IMAGE)

.PHONY: all clean qemu qemu-fat deps help kernel bootloader iso fat usb
